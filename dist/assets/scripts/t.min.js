angular.module("tree",["ngMessages","cgBusy","jlareau.pnotify"]).factory("treeService",["$filter",function(e){return{getPath:function(n,t){var r=[],o=e("reverse")(t),a=function(e){angular.forEach(o,function(n){e===n.$id&&(r.push(n),""!==n.parentId&&a(n.parentId))})};return a(n),e("reverse")(r)},pathNames:function(e){var n=[];return angular.forEach(e,function(e){n.push(e.name)}),n}}}]).controller("TreeController",["$scope","$location","user",function(e,n,t){"facebook:10204911533563856"!==t.uid&&n.path("/")}]).controller("EditNodeController",["$scope","$q","$modalInstance","node","nodeRef",function(e,n,t,r,o){function a(e){var t=n.defer(),r=t.promise;return o.update({name:e.name},function(e){e?t.reject(e):t.resolve()}),r}e.model={name:r.name,id:r.id},e.confirm=function(){e.editNodeForm.$valid&&(e.httpRequestPromise=a(e.model).then(function(){t.close()},function(e){t.dismiss(e)}))},e.cancel=function(){t.dismiss("The editing is been canceled")}}]).controller("DeleteNodeController",["$scope","$modalInstance","node",function(e,n,t){e.node=t,e.branchCheckBox=e.node.left+1!==e.node.right,e.model={branch:null},e.confirm=function(){n.close({node:t,branch:e.model.branch})},e.cancel=function(){n.dismiss("Delete action has be cancel")}}]).directive("jTree",["$q","$templateCache","$compile","$uibModal","FireRef","$firebaseArray","$firebaseObject","notificationService","$log",function(e,n,t,r,o,a,d,i,l){function s(n){var t=e.defer(),r=o.child(y);return r.set(n,function(e){e?t.reject(e):t.resolve()}),t.promise}function c(e){var n={},t=function(e){angular.forEach(e,function(e){n[e.id]={},n[e.id].name=e.name,n[e.id].parentId=e.parentId,n[e.id].left=e.left,n[e.id].right=e.right,e.children.length>0&&t(e.children)})};return t(e),n}function u(e){var n,t=function(e,r){angular.forEach(e,function(e){n||(n=1),e.left=n,n+=1,r?e.parentId=r:e.parentId="",void 0!==e.children&&e.children.length>=1?t(e.children,e.id):e.children=[],e.right=n,n+=1})};t(e)}function m(e,n,t){var r={targetTree:[],recordsIdsForDelete:[]},o=function(e){var n=[];n.push(e.id);var t=function(e){angular.forEach(e,function(e){n.push(e.id),e.children.length>0&&t(e.children)})};return t(e.children),n},a=function(e){angular.forEach(e,function(e){if(e.id===n)if(e.children.length>0)if(t===!0)r.recordsIdsForDelete=o(e);else{if(r.recordsIdsForDelete.push(e.id),""===e.parentId)for(var d=0;d<e.children.length;d++)e.children[d].parentId="";else for(var i=0;i<e.children.length;i++)e.children[i].parentId=e.parentId;a(e.children)}else r.recordsIdsForDelete.push(e.id);else{var l={id:e.id,parentId:e.parentId,name:e.label,left:e.left,right:e.right,children:[]};""!==e.parentId?f(r.targetTree,l):r.targetTree.push(l),void 0!==e.children&&a(e.children)}})};return a(e),r}function h(e){var n={};return n.id=e.$id,n.label=e.name,n.parentId=e.parentId,n.left=parseInt(e.left),n.right=parseInt(e.right),n.children=[],n}function f(e,n){angular.forEach(e,function(e){e.id===n.parentId?e.children.push(n):e.children.length>0&&f(e.children,n)})}function p(e){var n=[];return angular.forEach(e,function(e){var t=h(e);""!==t.parentId?f(n,t):n.push(t)}),n}function v(e,n){var t={dragAndDrop:!0,selectable:!0,autoEscape:!1,autoOpen:!1,data:n};e.tree(t)}function g(e,n){e.tree("loadData",n)}var b={rawNodes:[]},F={},y="";return{restrict:"E",template:'<section cg-busy="{promise:httpRequestPromise,message:\'Just a moment\'}"><section><div class="panel panel-default"><div class="panel-heading"><h3 class="panel-title">New node</h3></div><div class="panel-body" ><form id="nodeForm" name="nodeForm" novalidate="" ng-submit="nodeFormSettings.submitForm()"><div class="form-group"><label>New node</label><input type="text" name="node" ng-model="nodeFormSettings.model.nodeName" required class="form-control" placeholder="" tabindex="1"><div data-ng-messages="nodeForm.$submitted && nodeForm.node.$error" class="help-block"><div data-ng-message="required">- The <b>node</b> name is required.</div><div data-ng-message="noSpecialChars">- The <b>node</b> name must not have special characters.</div></div></div></form></div><div class="panel-footer"><button form="nodeForm" class="btn btn-primary" type="submit">Send</button> <button class="btn btn-warning" ng-click="nodeFormSettings.resetForm()">Cancel</button></div></div></section><section><div class="panel panel-default"><div class="panel-heading"><h3 class="panel-title" style="line-height: 30px;">The <b>{{reference | capitalize}}</b> tree data:<div class="btn-group pull-right" role="group" aria-label="..." ng-show="nodeSelected.status"><button ng-click="editNode(nodeSelected.node)" type="button" class="btn btn-info">Edit</button><button ng-click="deleteNode(nodeSelected.node)" type="button" class="btn btn-danger">Delete</button></div></h3></div><div class="panel-body"><div ng-show="rawNodes.length === 0">Start add some data.</div><div id="tree"></div><div/><div/></section><section><div class="panel panel-default"><div class="panel-heading"><h3 class="panel-title" style="line-height: 30px;">The <b>{{reference | capitalize}}</b> tree <b>Raw</b> data: </h3></div><div class="panel-body"><div><div class="alert alert-danger" role="alert"> For recovering purposes, after any changes, update the node service at code level, to avoid lost of this critical data.  </div></div><pre>{{rawNodes | json }}</pre><div/><div/></section><section/>',scope:{reference:"@"},link:function(e,n){if("undefined"==typeof e.reference)throw">>> The reference attr is undefined >>>";y=e.reference;var t=n.find("#tree");v(t,[]),t.bind("tree.move",function(n){n.preventDefault(),n.move_info.do_move();var r=angular.fromJson(t.tree("toJson"));u(r);var o=c(r);e.httpRequestPromise=s(o).then(function(){e.nodeSelected={},i.success("The tree or nodes has been update")},function(e){i.error(e)})}),t.bind("tree.select",function(n){var t={status:!1,$node:{}};null!==n.node&&(t.node=n.node,t.status=!0),e.nodeSelected=t,F=t,e.$apply()}),e.editNode=function(n){var t=r.open({template:'<div class="modal-header"><h3 class="modal-title">Edit node:</h3></div><div class="modal-body" cg-busy="{promise:httpRequestPromise,message:\'Just a moment\'}"><h3 class="text-danger" style="margin-top: 0; margin-bottom: 0;">{{node.name | capitalizeFirstChar}}</h3><form id="editNodeForm" name="editNodeForm" novalidate="" ng-submit="confirm()"><div class="form-group"><label>Node name</label><input type="text" name="node" ng-model="model.name" required no-special-chars class="form-control" placeholder="" tabindex="1"><div data-ng-messages="editNodeForm.$submitted && editNodeForm.node.$error" class="help-block"><div data-ng-message="required">- The <b>node</b> name is required.</div><div data-ng-message="noSpecialChars">- La <b>node</b> name must not have special characters.</div></div></div></form></div><div class="modal-footer"><button class="btn btn-warning" ng-click="cancel()">Cancel</button><button form="editNodeForm" class="btn btn-primary" type="submit">Confirm</button></div>',controller:"EditNodeController",resolve:{node:function(){return n},nodeRef:function(){return o.child(e.reference).child(n.id)}}});t.result.then(function(){e.nodeSelected={},i.success("It was updated successfully.")},function(e){i.error(e)})},e.deleteNode=function(n){var t=r.open({template:'<div class="modal-header"><h3 class="modal-title">Do you really want to delete this node?</h3></div><div class="modal-body"><h3 class="text-danger" style="margin-top: 0; margin-bottom: 0;">{{node.name | capitalizeFirstChar}}</h3><form id="deleteBranchForm" name="deleteBranchForm" novalidate="" ng-submit="confirm()"><div ng-show="branchCheckBox"><div class="checkbox"><label><input type="checkbox" name="branch" ng-model="model.branch" value="">And daughters nodes to.</label></div></div></form></div><div class="modal-footer"><button class="btn btn-warning" ng-click="cancel()">Cancel</button><button form="deleteBranchForm" class="btn btn-primary" type="submit">Confirm</button></div>',controller:"DeleteNodeController",resolve:{node:function(){return n}}});t.result.then(function(n){e.nodeSelected={};var t=m(p(b.rawNodes),n.node.id,n.branch);u(t.targetTree);var r=c(t.targetTree);e.httpRequestPromise=s(r).then(function(){i.success("The tree or nodes has been update")},function(e){i.error(e)})},function(e){i.error(e)})},e.nodeFormSettings={model:{nodeName:""},submitForm:function(){if(e.nodeForm.$valid){var n,t,r=b.rawNodes.length;if(r>=1){var o=2*r;n=o+1,t=o+2}else n=1,t=2;var a={left:n,right:t,parentId:"",name:e.nodeFormSettings.model.nodeName};e.httpRequestPromise=b.rawNodes.$add(a).then(function(){e.nodeSelected={},i.success("Data has been saved."),e.nodeFormSettings.resetForm()},function(e){i.error(e)})}},resetForm:function(){e.nodeFormSettings.model=angular.copy(e.nodeFormSettings.modelCopy),e.nodeForm.$setUntouched(),e.nodeForm.$setPristine()}},e.nodeFormSettings.modelCopy=angular.copy(e.nodeFormSettings.model),b.rawNodes=a(o.child(e.reference).orderByChild("left")),e.rawNodes=d(o.child(e.reference).orderByChild("left")),e.httpRequestPromise=b.rawNodes.$loaded(null,function(e){i.error(e)}),b.rawNodes.$watch(function(){g(t,p(b.rawNodes))})}}}]);